{"version":3,"sources":["components/left-strip/styles.js","components/information-content/styles.js","components/information-content/index.js","components/left-strip/index.js","page/styles.js","page/index.js","App.js","serviceWorker.js","index.js"],"names":["ContainerLefStrip","styled","div","ContainerImage","Image","img","ContainerInformationUser","props","centerTitle","index","children","title","icon","center","src","Container","ContinerTitle","TitleName","h1","ContinerInformation","ContainerText","p","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"w1BAEO,IAAMA,EAAoBC,IAAOC,IAAV,KAejBC,EAAiBF,IAAOC,IAAV,KASdE,EAAQH,IAAOI,IAAV,K,oMCxBX,IAAMC,EAA2BL,IAAOC,IAAV,KAGzB,SAAAK,GAAK,OAAIA,EAAMC,YAAN,cAGA,SAAAD,GAAK,OAAIA,EAAMC,YAAN,4BCkBfC,MArBf,YAOG,IALCC,EAKF,EALEA,SACAC,EAIF,EAJEA,MACAC,EAGF,EAHEA,KACAC,EAEF,EAFEA,OAGF,OACE,oCACA,kBAACP,EAAD,CAA0BE,YAAaK,GACvC,4BAAKF,GACJC,GACC,4BAAKA,IAGJF,ICMQD,MAnBf,WACE,OACE,kBAACT,EAAD,KACE,kBAACG,EAAD,KACE,kBAACC,EAAD,CAAOU,IAAI,iEAEX,kBAAC,EAAD,CAA0BH,MAAM,OAAOE,QAAM,GAC3C,uCAEF,kBAAC,EAAD,CAA0BF,MAAM,SAASE,QAAM,GAC7C,sCAEF,kBAAC,EAAD,CAA0BF,MAAM,SAASE,QAAM,GAC7C,wC,mjBCnBH,IAAME,EAAYd,IAAOC,IAAV,KAGTc,EAAgBf,IAAOC,IAAV,KAKbe,EAAYhB,IAAOiB,GAAV,KAITC,EAAsBlB,IAAOC,IAAV,KAUnBkB,EAAgBnB,IAAOoB,EAAV,KCkBXZ,MA/Bf,WACE,OACE,kBAACM,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,sCAEF,kBAAC,EAAD,MACA,kBAACE,EAAD,KACE,kBAACF,EAAD,qCACA,kBAAC,EAAD,CAA0BN,MAAM,UAAUC,KAAK,UAC7C,kBAACQ,EAAD,oOAMF,kBAAC,EAAD,CAA0BT,MAAM,YAAYC,KAAK,UACjD,2CACA,sCACA,uEAEA,kBAAC,EAAD,CAA0BD,MAAM,YAAYC,KAAK,UAC/C,2CACA,sCACA,0ECxBKU,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bdc15e49.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const ContainerLefStrip = styled.div`\r\n  width: 20%;\r\n  height: 100%;\r\n  background-color: yellow;\r\n  position: absolute;\r\n  text-align: center;\r\n  top: 0;\r\n  left: 0;\r\n  right: 68%; \r\n  margin: 0 auto;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const ContainerImage = styled.div`\r\n  margin: 45px;\r\n  width: 62%;\r\n  height: 19%;\r\n  background-color: green;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n","import styled from 'styled-components';\n\nexport const ContainerInformationUser = styled.div`\n  display: flex;\n  flex-direction: row;\n  height: ${props => props.centerTitle ? `8%` : `50%`};\n  width: 100%;\n  background-color: red;\n  justify-content: ${props => props.centerTitle ? `center` : `space-between`};\n`;","import React from 'react';\nimport {\n  ContainerInformationUser,\n} from './styles'\n\nfunction index(\n  {\n    children, \n    title,\n    icon,\n    center\n  },\n) {\n  return (\n    <>\n    <ContainerInformationUser centerTitle={center}>\n    <h4>{title}</h4>\n    {icon && (\n      <h4>{icon}</h4>\n    )}\n    </ContainerInformationUser>\n      {children}\n   </>\n  );\n}\n\nexport default index;\n","import React from 'react';\r\nimport {\r\n  ContainerLefStrip,\r\n  ContainerImage,\r\n  Image,\r\n} from './styles';\r\nimport ContainerInformationUser from '../information-content';\r\n\r\nfunction index() {\r\n  return (\r\n    <ContainerLefStrip>\r\n      <ContainerImage>\r\n        <Image src=\"https://avatars1.githubusercontent.com/u/31748119?s=460&v=4\" />\r\n      </ContainerImage>\r\n        <ContainerInformationUser title='TEST' center>\r\n          <p>sssssss</p>\r\n        </ContainerInformationUser>\r\n        <ContainerInformationUser title='TEST 2' center>\r\n          <p>ededed</p>\r\n        </ContainerInformationUser>\r\n        <ContainerInformationUser title='TEST 3' center>\r\n          <p>Edison</p>\r\n        </ContainerInformationUser>\r\n    </ContainerLefStrip>\r\n  );\r\n}\r\n\r\nexport default index;\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  width: 100%;  \r\n`;\r\nexport const ContinerTitle = styled.div`\r\n  background-color: red;\r\n  padding: 20px;\r\n`;\r\n\r\nexport const TitleName = styled.h1`\r\n  text-align: right;\r\n`;\r\n\r\nexport const ContinerInformation = styled.div`\r\n  width: 56%;\r\n  background-color: blue;\r\n  padding: 20px;\r\n  top: 0;\r\n  left: 0;\r\n  right: 68%;\r\n  margin: 0px 0px 0px 35%;\r\n`;\r\n\r\nexport const ContainerText = styled.p``;","import React from 'react';\r\nimport LeftStrip from '../components/left-strip';\r\nimport {\r\n  Container,\r\n  ContinerTitle,\r\n  TitleName,\r\n  ContinerInformation,\r\n  ContainerText,\r\n} from './styles'\r\nimport ContainerInformationUser from '../components/information-content';\r\n\r\nfunction index() {\r\n  return (\r\n    <Container>\r\n      <ContinerTitle>\r\n        <TitleName>Edison jordan alba sarmiento</TitleName>\r\n      </ContinerTitle>\r\n      <LeftStrip/>\r\n      <ContinerInformation>\r\n        <TitleName>Edison jordan alba sarmiento</TitleName>\r\n        <ContainerInformationUser title='Abut me' icon='rocket'>\r\n          <ContainerText>\r\n          sssdsssddssssddssssddssssddssssddssssddssssddssssddssssddssssddssssddss\r\n          ssddsdssssddssssddssssddssssddssssddssssddssssddssssddssssddssssddssssdds\r\n          sssddssssddssssddssssddssssddssssddssssddssssddssssddssssddssssddssssdds\r\n          </ContainerText>\r\n        </ContainerInformationUser>\r\n        <ContainerInformationUser title='Abut me 2' icon='NAME 2'>\r\n        <h4>2018 - 2019</h4>\r\n        <p>TESTEST</p>\r\n        <p>TESTEST TESTEST TESTEST TESTEST TESTEST</p>\r\n        </ContainerInformationUser>\r\n        <ContainerInformationUser title='Abut me 3' icon='NAME 3'>\r\n          <h4>2018 - 2019</h4>\r\n          <p>TESTEST</p>\r\n          <p>TESTEST TESTEST TESTEST TESTEST TESTEST</p>\r\n        </ContainerInformationUser>\r\n      </ContinerInformation>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default index;\r\n","import React from 'react';\nimport Page from './page';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Page/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}